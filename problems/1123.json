{"number":"1123","title":"Lowest Common Ancestor of Deepest Leaves","url":"https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves","difficulty":"Medium","question":"Given a rooted binary tree, return the lowest common ancestor of its deepest leaves.\n\nRecall that:\n\n\n\tThe node of a binary tree is a leaf if and only if it has no children\n\tThe depth of the root of the tree is 0, and if the depth of a node is d, the depth of each of its children&#xA0;is&#xA0;d+1.\n\tThe lowest common ancestor of a set S of nodes is the node A with the largest depth such that every node in S is in the subtree with root A.\n\n\n&#xA0;\nExample 1:\n\nInput: root = [1,2,3]\nOutput: [1,2,3]\nExplanation: \nThe deepest leaves are the nodes with values 2 and 3.\nThe lowest common ancestor of these leaves is the node with value 1.\nThe answer returned is a TreeNode object (not an array) with serialization &quot;[1,2,3]&quot;.\n\n\nExample 2:\n\nInput: root = [1,2,3,4]\nOutput: [4]\n\n\nExample 3:\n\nInput: root = [1,2,3,4,5]\nOutput: [2,4,5]\n\n\n&#xA0;\nConstraints:\n\n\n\tThe given tree will have between 1 and 1000 nodes.\n\tEach node of the tree will have a distinct value between 1 and 1000.\n\n","code":"undefined/** * Definition for a binary tree node. * public class TreeNode { *     public int val; *     public TreeNode left; *     public TreeNode right; *     public TreeNode(int x) { val = x; } * } */public class Solution {    public TreeNode LcaDeepestLeaves(TreeNode root) {            }}"}