{"number":"1157","title":"Online Majority Element In Subarray","url":"https://leetcode.com/problems/online-majority-element-in-subarray","difficulty":"Hard","question":"Implementing the class MajorityChecker, which has the following API:\n\n\n\tMajorityChecker(int[] arr) constructs an instance of MajorityChecker with the given array arr;\n\tint query(int left, int right, int threshold)&#xA0;has arguments&#xA0;such that:\n\t\n\t\t0 &lt;= left&#xA0;&lt;= right&#xA0;&lt; arr.length representing a subarray of arr;\n\t\t2 * threshold &gt; right - left + 1, ie. the threshold is always a strict majority of the length of&#xA0;the subarray\n\t\n\t\n\n\nEach&#xA0;query(...) returns the element in arr[left], arr[left+1], ..., arr[right] that occurs at least threshold times, or -1 if no such element exists.\n\n&#xA0;\n\nExample:\n\nMajorityChecker majorityChecker = new MajorityChecker([1,1,2,2,1,1]);\nmajorityChecker.query(0,5,4); // returns 1\nmajorityChecker.query(0,3,3); // returns -1\nmajorityChecker.query(2,3,2); // returns 2\n\n\n&#xA0;\nConstraints:\n\n\n\t1 &lt;= arr.length &lt;=&#xA0;20000\n\t1 &lt;= arr[i]&#xA0;&lt;=&#xA0;20000\n\tFor each query, 0 &lt;= left &lt;= right &lt; len(arr)\n\tFor each query, 2 * threshold &gt; right - left + 1\n\tThe number of queries is at most 10000\n","code":"undefinedpublic class MajorityChecker {​    public MajorityChecker(int[] arr) {            }        public int Query(int left, int right, int threshold) {            }}​/** * Your MajorityChecker object will be instantiated and called as such: * MajorityChecker obj = new MajorityChecker(arr); * int param_1 = obj.Query(left,right,threshold); */"}