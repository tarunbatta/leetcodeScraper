{
    "number": "1028",
    "title": "Recover a Tree From Preorder Traversal",
    "url": "https://leetcode.com/problems/recover-a-tree-from-preorder-traversal",
    "difficulty": "Hard",
    "question": "We run a&#xA0;preorder&#xA0;depth first search on the root of a binary tree.\n\nAt each node in this traversal, we output D dashes (where D is the depth of this node), then we output the value of this node.&#xA0;&#xA0;(If the depth of a node is D, the depth of its immediate child is D+1.&#xA0; The depth of the root node is 0.)\n\nIf a node has only one child, that child is guaranteed to be the left child.\n\nGiven the output S of this traversal, recover the tree and return its root.\n\n&#xA0;\n\nExample 1:\n\n\n\nInput: &quot;1-2--3--4-5--6--7&quot;\nOutput: [1,2,5,3,4,6,7]\n\n\n\nExample 2:\n\n\n\nInput: &quot;1-2--3---4-5--6---7&quot;\nOutput: [1,2,5,3,null,6,null,4,null,7]\n\n\n\n&#xA0;\n\n\nExample 3:\n\n\n\nInput: &quot;1-401--349---90--88&quot;\nOutput: [1,401,null,349,88,90]\n\n\n\n&#xA0;\n\nNote:\n\n\n\tThe number of nodes in the original tree is between 1 and 1000.\n\tEach node will have a value between 1 and 10^9.\n\n\n",
    "code": "undefined/** * Definition for a binary tree node. * public class TreeNode { *     public int val; *     public TreeNode left; *     public TreeNode right; *     public TreeNode(int x) { val = x; } * } */public class Solution {    public TreeNode RecoverFromPreorder(string S) {            }}"
}