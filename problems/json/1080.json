{
    "number": "1080",
    "title": "Insufficient Nodes in Root to Leaf Paths",
    "url": "https://leetcode.com/problems/insufficient-nodes-in-root-to-leaf-paths",
    "difficulty": "Medium",
    "question": "Given the root&#xA0;of a binary tree, consider all root to leaf paths: paths from the root&#xA0;to any leaf.&#xA0; (A leaf is a node with no children.)\n\nA node is insufficient if&#xA0;every such root to leaf path intersecting this node has sum strictly less than&#xA0;limit.\n\nDelete all insufficient nodes simultaneously, and return the root of the resulting&#xA0;binary tree.\n\n&#xA0;\n\nExample 1:\n\n\nInput: root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1\n\nOutput: [1,2,3,4,null,null,7,8,9,null,14]\n\n\n\nExample 2:\n\n\nInput: root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22\n\nOutput: [5,4,8,11,null,17,4,7,null,null,null,5]\n\n&#xA0;\n\nExample 3:\n\n\nInput: root = [1,2,-3,-5,null,4,null], limit = -1\n\nOutput: [1,null,-3,4]\n\n\n&#xA0;\n\nNote:\n\n\n\tThe given tree will have between 1 and 5000 nodes.\n\t-10^5&#xA0;&lt;= node.val &lt;= 10^5\n\t-10^9 &lt;= limit&#xA0;&lt;= 10^9\n\n\n\n&#xA0;\n\n",
    "code": "undefined/** * Definition for a binary tree node. * public class TreeNode { *     public int val; *     public TreeNode left; *     public TreeNode right; *     public TreeNode(int x) { val = x; } * } */public class Solution {    public TreeNode SufficientSubset(TreeNode root, int limit) {            }}"
}