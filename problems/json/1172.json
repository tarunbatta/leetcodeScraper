{
    "number": "1172",
    "title": "Dinner Plate Stacks",
    "url": "https://leetcode.com/problems/dinner-plate-stacks",
    "difficulty": "Hard",
    "question": "You have an infinite number of stacks arranged in a row and numbered (left to right) from 0, each of the stacks has the same&#xA0;maximum capacity.\n\nImplement the DinnerPlates class:\n\n\n\tDinnerPlates(int capacity) Initializes the object with the maximum capacity of the stacks.\n\tvoid push(int val)&#xA0;pushes the given positive integer val into the leftmost stack with size less than capacity.\n\tint pop()&#xA0;returns the value at the top of the rightmost non-empty stack and removes it from that stack, and returns -1 if all stacks are empty.\n\tint popAtStack(int index)&#xA0;returns the value at the top of the stack with the given index and removes it from that stack, and returns -1 if the stack with that&#xA0;given index is empty.\n\n\nExample:\n\nInput: \n[&quot;DinnerPlates&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;popAtStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;popAtStack&quot;,&quot;popAtStack&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;]\n[[2],[1],[2],[3],[4],[5],[0],[20],[21],[0],[2],[],[],[],[],[]]\nOutput: \n[null,null,null,null,null,null,2,null,null,20,21,5,4,3,1,-1]\n\nExplanation: \nDinnerPlates D = DinnerPlates(2);  // Initialize with capacity = 2\nD.push(1);\nD.push(2);\nD.push(3);\nD.push(4);\nD.push(5);         // The stacks are now:  2 &#xA0;4\n&#xA0;                                          1 &#xA0;3 &#xA0;5\n                                           &#xFE48; &#xFE48; &#xFE48;\nD.popAtStack(0);   // Returns 2.  The stacks are now:    &#xA0;4\n            &#xA0;                                          1 &#xA0;3 &#xA0;5\n                                                       &#xFE48; &#xFE48; &#xFE48;\nD.push(20);        // The stacks are now: 20  4\n&#xA0;                                          1 &#xA0;3 &#xA0;5\n                                           &#xFE48; &#xFE48; &#xFE48;\nD.push(21);        // The stacks are now: 20  4 21\n&#xA0;                                          1 &#xA0;3 &#xA0;5\n                                           &#xFE48; &#xFE48; &#xFE48;\nD.popAtStack(0);   // Returns 20.  The stacks are now:     4 21\n             &#xA0;                                          1 &#xA0;3 &#xA0;5\n                                                        &#xFE48; &#xFE48; &#xFE48;\nD.popAtStack(2);   // Returns 21.  The stacks are now:     4\n             &#xA0;                                          1 &#xA0;3 &#xA0;5\n                                                        &#xFE48; &#xFE48; &#xFE48; \nD.pop()            // Returns 5.  The stacks are now:      4\n             &#xA0;                                          1 &#xA0;3 \n                                                        &#xFE48; &#xFE48;  \nD.pop()            // Returns 4.  The stacks are now:   1 &#xA0;3 \n                                                        &#xFE48; &#xFE48;   \nD.pop()            // Returns 3.  The stacks are now:   1 \n                                                        &#xFE48;   \nD.pop()            // Returns 1.  There are no stacks.\nD.pop()            // Returns -1.  There are still no stacks.\n\n\n&#xA0;\nConstraints:\n\n\n\t1 &lt;= capacity&#xA0;&lt;= 20000\n\t1 &lt;= val&#xA0;&lt;= 20000\n\t0 &lt;= index&#xA0;&lt;= 100000\n\tAt most 200000&#xA0;calls will be made to push, pop, and popAtStack.\n\n",
    "code": "undefinedpublic class DinnerPlates {​    public DinnerPlates(int capacity) {            }        public void Push(int val) {            }        public int Pop() {            }        public int PopAtStack(int index) {            }}​/** * Your DinnerPlates object will be instantiated and called as such: * DinnerPlates obj = new DinnerPlates(capacity); * obj.Push(val); * int param_2 = obj.Pop(); * int param_3 = obj.PopAtStack(index); */"
}