{
    "number": "1114",
    "title": "Print in Order",
    "url": "https://leetcode.com/problems/print-in-order",
    "difficulty": "Easy",
    "question": "Suppose we have a class:\n\npublic class Foo {\n&#xA0; public void first() { print(&quot;first&quot;); }\n&#xA0; public void second() { print(&quot;second&quot;); }\n&#xA0; public void third() { print(&quot;third&quot;); }\n}\n\n\nThe same instance of Foo will be passed to three different threads. Thread A will call first(), thread B will call second(), and thread C will call third(). Design a mechanism and modify the program&#xA0;to ensure that&#xA0;second()&#xA0;is executed after&#xA0;first(), and&#xA0;third() is executed after&#xA0;second().\n\n&#xA0;\n\nExample 1:\n\nInput: [1,2,3]\nOutput: &quot;firstsecondthird&quot;\nExplanation: There are three threads being fired asynchronously. The input [1,2,3] means thread A calls first(), thread B calls second(), and thread C calls third(). &quot;firstsecondthird&quot; is the correct output.\n\n\nExample 2:\n\nInput: [1,3,2]\nOutput: &quot;firstsecondthird&quot;\nExplanation: The input [1,3,2] means thread A calls first(), thread B calls third(), and thread C calls second(). &quot;firstsecondthird&quot; is the correct output.\n\n&#xA0;\n\nNote:\n\nWe do not know how the threads will be scheduled in the operating system, even though the numbers in the input seems to imply the ordering. The input format you see is mainly&#xA0;to ensure our tests&apos; comprehensiveness.\n",
    "code": "undefinedpublic class Foo {​    public Foo() {            }​    public void First(Action printFirst) {                // printFirst() outputs \"first\". Do not change or remove this line.        printFirst();    }​    public void Second(Action printSecond) {                // printSecond() outputs \"second\". Do not change or remove this line.        printSecond();    }​    public void Third(Action printThird) {                // printThird() outputs \"third\". Do not change or remove this line.        printThird();    }}"
}