{"number":"900","title":"RLE Iterator","url":"https://leetcode.com/problems/rle-iterator","difficulty":"Medium","question":"Write an iterator that iterates through a run-length encoded sequence.\n\nThe iterator is initialized by RLEIterator(int[] A), where A is a run-length encoding of some&#xA0;sequence.&#xA0; More specifically,&#xA0;for all even i,&#xA0;A[i] tells us the number of times that the non-negative integer value A[i+1] is repeated in the sequence.\n\nThe iterator supports one function:&#xA0;next(int n), which exhausts the next n elements&#xA0;(n &gt;= 1) and returns the last element exhausted in this way.&#xA0; If there is no element left to exhaust, next&#xA0;returns -1 instead.\n\nFor example, we start with A = [3,8,0,9,2,5], which is a run-length encoding of the sequence [8,8,8,5,5].&#xA0; This is because the sequence can be read as&#xA0;&quot;three eights, zero nines, two fives&quot;.\n\n&#xA0;\n\nExample 1:\n\nInput: [&quot;RLEIterator&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;], [[[3,8,0,9,2,5]],[2],[1],[1],[2]]\nOutput: [null,8,8,5,-1]\nExplanation: \nRLEIterator is initialized with RLEIterator([3,8,0,9,2,5]).\nThis maps to the sequence [8,8,8,5,5].\nRLEIterator.next is then called 4 times:\n\n.next(2) exhausts 2 terms of the sequence, returning 8.  The remaining sequence is now [8, 5, 5].\n\n.next(1) exhausts 1 term of the sequence, returning 8.  The remaining sequence is now [5, 5].\n\n.next(1) exhausts 1 term of the sequence, returning 5.  The remaining sequence is now [5].\n\n.next(2) exhausts 2 terms, returning -1.  This is because the first term exhausted was 5,\nbut the second term did not exist.  Since the last term exhausted does not exist, we return -1.\n\n\n\nNote:\n\n\n\t0 &lt;= A.length &lt;= 1000\n\tA.length&#xA0;is an even integer.\n\t0 &lt;= A[i] &lt;= 10^9\n\tThere are at most 1000 calls to RLEIterator.next(int n) per test case.\n\tEach call to&#xA0;RLEIterator.next(int n)&#xA0;will have 1 &lt;= n &lt;= 10^9.\n\n","code":"undefinedpublic class RLEIterator {​    public RLEIterator(int[] A) {            }        public int Next(int n) {            }}​/** * Your RLEIterator object will be instantiated and called as such: * RLEIterator obj = new RLEIterator(A); * int param_1 = obj.Next(n); */"}