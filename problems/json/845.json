{
    "number": "845",
    "title": "Longest Mountain in Array",
    "url": "https://leetcode.com/problems/longest-mountain-in-array",
    "difficulty": "Medium",
    "question": "Let&apos;s call any (contiguous) subarray B (of A)&#xA0;a mountain if the following properties hold:\n\n\n\tB.length &gt;= 3\n\tThere exists some 0 &lt; i&#xA0;&lt; B.length - 1 such that B[0] &lt; B[1] &lt; ... B[i-1] &lt; B[i] &gt; B[i+1] &gt; ... &gt; B[B.length - 1]\n\n\n(Note that B could be any subarray of A, including the entire array A.)\n\nGiven an array A&#xA0;of integers,&#xA0;return the length of the longest&#xA0;mountain.&#xA0;\n\nReturn 0 if there is no mountain.\n\nExample 1:\n\nInput: [2,1,4,7,3,2,5]\nOutput: 5\nExplanation: The largest mountain is [1,4,7,3,2] which has length 5.\n\n\nExample 2:\n\nInput: [2,2,2]\nOutput: 0\nExplanation: There is no mountain.\n\n\nNote:\n\n\n\t0 &lt;= A.length &lt;= 10000\n\t0 &lt;= A[i] &lt;= 10000\n\n\nFollow up:\n\n\n\tCan you solve it using only one pass?\n\tCan you solve it in O(1) space?\n\n",
    "code": "undefinedpublic class Solution {    public int LongestMountain(int[] A) {            }}"
}