{
    "number": "1146",
    "title": "Snapshot Array",
    "url": "https://leetcode.com/problems/snapshot-array",
    "difficulty": "Medium",
    "question": "Implement a SnapshotArray that supports the following interface:\n\n\n\tSnapshotArray(int length) initializes an array-like data structure with the given length.&#xA0; Initially, each element equals 0.\n\tvoid set(index, val) sets the element at the given index to be equal to val.\n\tint snap()&#xA0;takes a snapshot of the array and returns the snap_id: the total number of times we called snap() minus 1.\n\tint get(index, snap_id)&#xA0;returns the value at the given index, at the time we took the snapshot with the given snap_id\n\n\n&#xA0;\nExample 1:\n\nInput: [&quot;SnapshotArray&quot;,&quot;set&quot;,&quot;snap&quot;,&quot;set&quot;,&quot;get&quot;]\n[[3],[0,5],[],[0,6],[0,0]]\nOutput: [null,null,0,null,5]\nExplanation: \nSnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3\nsnapshotArr.set(0,5);  // Set array[0] = 5\nsnapshotArr.snap();  // Take a snapshot, return snap_id = 0\nsnapshotArr.set(0,6);\nsnapshotArr.get(0,0);  // Get the value of array[0] with snap_id = 0, return 5\n\n&#xA0;\nConstraints:\n\n\n\t1 &lt;= length&#xA0;&lt;= 50000\n\tAt most 50000&#xA0;calls will be made to set, snap, and get.\n\t0 &lt;= index&#xA0;&lt;&#xA0;length\n\t0 &lt;=&#xA0;snap_id &lt;&#xA0;(the total number of times we call snap())\n\t0 &lt;=&#xA0;val &lt;= 10^9\n\n",
    "code": "undefinedpublic class SnapshotArray {​    public SnapshotArray(int length) {            }        public void Set(int index, int val) {            }        public int Snap() {            }        public int Get(int index, int snap_id) {            }}​/** * Your SnapshotArray object will be instantiated and called as such: * SnapshotArray obj = new SnapshotArray(length); * obj.Set(index,val); * int param_2 = obj.Snap(); * int param_3 = obj.Get(index,snap_id); */"
}