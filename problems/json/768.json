{
    "number": "768",
    "title": "Max Chunks To Make Sorted II",
    "url": "https://leetcode.com/problems/max-chunks-to-make-sorted-ii",
    "difficulty": "Hard",
    "question": "This question is the same as &quot;Max Chunks to Make Sorted&quot; except the integers of the given array are not necessarily distinct, the input array could be up to length 2000, and the elements could be up to 10**8.\n\n\n\nGiven an array arr of integers (not necessarily distinct), we split the array into some number of &quot;chunks&quot; (partitions), and individually sort each chunk.&#xA0; After concatenating them,&#xA0;the result equals the sorted array.\n\nWhat is the most number of chunks we could have made?\n\nExample 1:\n\nInput: arr = [5,4,3,2,1]\nOutput: 1\nExplanation:\nSplitting into two or more chunks will not return the required result.\nFor example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn&apos;t sorted.\n\n\nExample 2:\n\nInput: arr = [2,1,3,4,4]\nOutput: 4\nExplanation:\nWe can split into two chunks, such as [2, 1], [3, 4, 4].\nHowever, splitting into [2, 1], [3], [4], [4] is the highest number of chunks possible.\n\n\nNote:\n\n\n\tarr will have length in range [1, 2000].\n\tarr[i] will be an integer in range [0, 10**8].\n\n\n&#xA0;\n",
    "code": "undefinedpublic class Solution {    public int MaxChunksToSorted(int[] arr) {            }}"
}