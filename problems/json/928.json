{"number":"928","title":"Minimize Malware Spread II","url":"https://leetcode.com/problems/minimize-malware-spread-ii","difficulty":"Hard","question":"(This problem is the same as Minimize Malware Spread, with the differences bolded.)\n\nIn a network of nodes, each node i is directly connected to another node j if and only if&#xA0;graph[i][j] = 1.\n\nSome nodes initial are initially infected by malware.&#xA0; Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.&#xA0; This spread of malware will continue until no more nodes can be infected in this manner.\n\nSuppose M(initial)&#xA0;is the final number of nodes infected with malware in the entire network, after the spread of malware stops.\n\nWe will&#xA0;remove one node from the initial list, completely removing it and any connections from this node to any other node.&#xA0; Return the node that if removed, would minimize&#xA0;M(initial).&#xA0; If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.\n\n&#xA0;\n\n\n\n\n\nExample 1:\n\nInput: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\nOutput: 0\n\n\n\nExample 2:\n\nInput: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]\nOutput: 1\n\n\n\nExample 3:\n\nInput: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]\nOutput: 1\n\n\n&#xA0;\n\nNote:\n\n\n\t1 &lt; graph.length = graph[0].length &lt;= 300\n\t0 &lt;= graph[i][j] == graph[j][i] &lt;= 1\n\tgraph[i][i] = 1\n\t1 &lt;= initial.length &lt; graph.length\n\t0 &lt;= initial[i] &lt; graph.length\n\n\n\n","code":"undefinedpublic class Solution {    public int MinMalwareSpread(int[][] graph, int[] initial) {            }}"}