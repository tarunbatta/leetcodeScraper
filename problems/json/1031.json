{
    "number": "1031",
    "title": "Maximum Sum of Two Non-Overlapping Subarrays",
    "url": "https://leetcode.com/problems/maximum-sum-of-two-non-overlapping-subarrays",
    "difficulty": "Medium",
    "question": "Given an array A of non-negative integers, return the maximum sum of elements in two non-overlapping (contiguous) subarrays, which have lengths&#xA0;L and M.&#xA0; (For clarification, the L-length subarray could occur before or after the M-length subarray.)\n\nFormally,&#xA0;return the largest V for which&#xA0;V = (A[i] + A[i+1] + ... + A[i+L-1]) + (A[j] + A[j+1] + ... + A[j+M-1]) and either:\n\n\n\t0 &lt;= i &lt; i + L - 1 &lt; j &lt; j + M - 1 &lt; A.length, or\n\t0 &lt;= j &lt; j + M - 1 &lt; i &lt; i + L - 1 &lt; A.length.\n\n\n&#xA0;\n\n\n\n\n\nExample 1:\n\nInput: A = [0,6,5,2,2,5,1,9,4], L = 1, M = 2\nOutput: 20\nExplanation: One choice of subarrays is [9] with length 1, and [6,5] with length 2.\n\n\n\nExample 2:\n\nInput: A = [3,8,1,3,2,1,8,9,0], L = 3, M = 2\nOutput: 29\nExplanation: One choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2.\n\n\n\nExample 3:\n\nInput: A = [2,1,5,6,0,9,5,0,3,8], L = 4, M = 3\nOutput: 31\nExplanation: One choice of subarrays is [5,6,0,9] with length 4, and [3,8] with length 3.\n\n\n&#xA0;\n\nNote:\n\n\n\tL &gt;= 1\n\tM &gt;= 1\n\tL + M &lt;= A.length &lt;= 1000\n\t0 &lt;= A[i] &lt;= 1000\n\n\n\n\n",
    "code": "undefinedpublic class Solution {    public int MaxSumTwoNoOverlap(int[] A, int L, int M) {            }}"
}