{
    "number": "729",
    "title": "My Calendar I",
    "url": "https://leetcode.com/problems/my-calendar-i",
    "difficulty": "Medium",
    "question": "Implement a MyCalendar class to store your events. A new event can be added if adding the event will not cause a double booking.\n\nYour class will have the method, book(int start, int end). Formally, this represents a booking on the half open interval [start, end), the range of real numbers x such that start &lt;= x &lt; end.\n\nA double booking happens when two events have some non-empty intersection (ie., there is some time that is common to both events.)\n\nFor each call to the method MyCalendar.book, return true if the event can be added to the calendar successfully without causing a double booking. Otherwise, return false and do not add the event to the calendar.\nYour class will be called like this: MyCalendar cal = new MyCalendar(); MyCalendar.book(start, end)\n\nExample 1:\n\nMyCalendar();\nMyCalendar.book(10, 20); // returns true\nMyCalendar.book(15, 25); // returns false\nMyCalendar.book(20, 30); // returns true\nExplanation: \nThe first event can be booked.  The second can&apos;t because time 15 is already booked by another event.\nThe third event can be booked, as the first event takes every time less than 20, but not including 20.\n\n\n&#xA0;\n\nNote:\n\n\n\tThe number of calls to MyCalendar.book per test case will be at most 1000.\n\tIn calls to MyCalendar.book(start, end), start and end are integers in the range [0, 10^9].\n\n\n&#xA0;\n",
    "code": "undefinedpublic class MyCalendar {​    public MyCalendar() {            }        public bool Book(int start, int end) {            }}​/** * Your MyCalendar object will be instantiated and called as such: * MyCalendar obj = new MyCalendar(); * bool param_1 = obj.Book(start,end); */"
}