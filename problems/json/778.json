{
    "number": "778",
    "title": "Swim in Rising Water",
    "url": "https://leetcode.com/problems/swim-in-rising-water",
    "difficulty": "Hard",
    "question": "On an N x N grid, each square grid[i][j] represents the elevation at that point (i,j).\n\nNow rain starts to fall. At time t, the depth of the water everywhere is t. You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are&#xA0;at most&#xA0;t. You can swim infinite distance in zero time. Of course, you must stay within the boundaries of the grid during your swim.\n\nYou start at the top left square (0, 0). What is the least time until you can reach the bottom right square (N-1, N-1)?\n\nExample 1:\n\nInput: [[0,2],[1,3]]\nOutput: 3\nExplanation:\nAt time 0, you are in grid location (0, 0).\nYou cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.\n\nYou cannot reach point (1, 1) until time 3.\nWhen the depth of water is 3, we can swim anywhere inside the grid.\n\n\nExample 2:\n\nInput: [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]\nOutput: 16\nExplanation:\n 0  1  2  3  4\n24 23 22 21  5\n12 13 14 15 16\n11 17 18 19 20\n10  9  8  7  6\n\nThe final route is marked in bold.\nWe need to wait until time 16 so that (0, 0) and (4, 4) are connected.\n\n\nNote:\n\n\n\t2 &lt;= N &lt;= 50.\n\tgrid[i][j] is a permutation of [0, ..., N*N - 1].\n\n",
    "code": "undefinedpublic class Solution {    public int SwimInWater(int[][] grid) {            }}"
}