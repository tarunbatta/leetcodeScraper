{
    "number": "987",
    "title": "Vertical Order Traversal of a Binary Tree",
    "url": "https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree",
    "difficulty": "Medium",
    "question": "Given a binary tree, return the vertical order traversal of its nodes&#xA0;values.\n\nFor each node at position (X, Y), its left and right children respectively&#xA0;will be at positions (X-1, Y-1) and (X+1, Y-1).\n\nRunning a vertical line from X = -infinity to X = +infinity, whenever the vertical line touches some nodes, we report the values of the nodes in order from top to bottom (decreasing Y coordinates).\n\nIf two nodes have the same position, then the value of the node that is reported first is the value that is smaller.\n\nReturn an list&#xA0;of non-empty reports in order of X coordinate.&#xA0; Every report will have a list of values of nodes.\n\n&#xA0;\n\nExample 1:\n\n\n\n\nInput: [3,9,20,null,null,15,7]\nOutput: [[9],[3,15],[20],[7]]\nExplanation: \nWithout loss of generality, we can assume the root node is at position (0, 0):\nThen, the node with value 9 occurs at position (-1, -1);\nThe nodes with values 3 and 15 occur at positions (0, 0) and (0, -2);\nThe node with value 20 occurs at position (1, -1);\nThe node with value 7 occurs at position (2, -2).\n\n\n\nExample 2:\n\n\n\nInput: [1,2,3,4,5,6,7]\nOutput: [[4],[2],[1,5,6],[3],[7]]\nExplanation: \nThe node with value 5 and the node with value 6 have the same position according to the given scheme.\nHowever, in the report &quot;[1,5,6]&quot;, the node value of 5 comes first since 5 is smaller than 6.\n\n\n&#xA0;\n\n\nNote:\n\n\n\tThe tree will have between 1&#xA0;and 1000 nodes.\n\tEach node&apos;s value will be between 0 and 1000.\n\n\n\n\n&#xA0;\n\n",
    "code": "undefined/** * Definition for a binary tree node. * public class TreeNode { *     public int val; *     public TreeNode left; *     public TreeNode right; *     public TreeNode(int x) { val = x; } * } */public class Solution {    public IList<IList<int>> VerticalTraversal(TreeNode root) {            }}"
}