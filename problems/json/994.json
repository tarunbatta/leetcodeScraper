{"number":"994","title":"Rotting Oranges","url":"https://leetcode.com/problems/rotting-oranges","difficulty":"Easy","question":"In a given grid, each cell can have one of three&#xA0;values:\n\n\n\tthe value 0 representing an empty cell;\n\tthe value 1 representing a fresh orange;\n\tthe value 2 representing a rotten orange.\n\n\nEvery minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.\n\nReturn the minimum number of minutes that must elapse until no cell has a fresh orange.&#xA0; If this is impossible, return -1 instead.\n\n&#xA0;\n\n\nExample 1:\n\n\n\nInput: [[2,1,1],[1,1,0],[0,1,1]]\nOutput: 4\n\n\n\nExample 2:\n\nInput: [[2,1,1],[0,1,1],[1,0,1]]\nOutput: -1\nExplanation:  The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.\n\n\n\nExample 3:\n\nInput: [[0,2]]\nOutput: 0\nExplanation:  Since there are already no fresh oranges at minute 0, the answer is just 0.\n\n\n&#xA0;\n\nNote:\n\n\n\t1 &lt;= grid.length &lt;= 10\n\t1 &lt;= grid[0].length &lt;= 10\n\tgrid[i][j] is only 0, 1, or 2.\n\n\n\n","code":"undefinedpublic class Solution {    public int OrangesRotting(int[][] grid) {            }}"}